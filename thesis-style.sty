% !TeX root = thesis-main.tex
\newcommand{\thesislang}{italian}
\usepackage[\thesislang]{babel}
\usepackage[utf8]{inputenc}
\usepackage{graphicx}
\usepackage{listings}
\usepackage{catchfile}
\usepackage{lstautogobble}
\usepackage{amsmath}
\usepackage{amssymb}
\usepackage{amsthm}
\usepackage{microtype}
\usepackage{csquotes}
\usepackage{tabularx}
\usepackage{ltablex}
\usepackage{tikz}
\usepackage{svg}
\usepackage{booktabs}
\usepackage{xcolor}
\usepackage{setspace}
\usepackage{latexsym}
\usepackage{geometry}
\usepackage[backend=biber, sorting=none, style=numeric-comp, defernumbers=true]{biblatex}
\usepackage[\thesislang]{todonotes}
\usepackage{hyperref}
\usepackage[\thesislang]{cleveref}

% Shortcuts for todo notes
\newcommand{\mustfix}[1]{\todo[color=red!40]{#1}}
\newcommand{\shouldfix}[1]{\todo[color=orange!40]{#1}}
\newcommand{\nicetohave}[1]{\todo[color=green!40]{#1}}


% Command to import code from a file and autogobble it
% #0 = language
% #1 = start-line (1-based)
% #2 = end-line (inclusive)
% #3 = file (relative to the root of the project)
\newcommand{\codeFromFile}[4]{%
% Take the required lines from the given file and write them to a temporary file
%\immediate\write18{sed -n '#2,#3p;#3q' #4 > out/code.txt}%
% Remove excess indentation from specified lines based on indentation of first line
%\immediate\write18{awk 'NR==1 && match($0, /^ */) {p=RLENGTH+1};
%  {print(substr($0,p))}' out/code.txt > out/code-indent.txt}%
% Include the temporary file in the document
\immediate\write18{./getCode.sh "#4" #2 #3}
\lstinputlisting[language=#1]{out/getCode/temp.txt}%
}

\newcommand{\scalaFromFile}[3]{\codeFromFile{scala3}{#1}{#2}{master-thesis-code-examples/src/main/scala/#3}}
\newcommand{\haskellFromFile}[3]{\codeFromFile{haskell}{#1}{#2}{#3}}

% Set directory for images
\graphicspath{{./images/}}

% Set bibliography source
\addbibresource{bibliography.bib}

% Italian listing name
\renewcommand{\lstlistingname}{Listato}
\renewcommand{\lstlistlistingname}{Elenco dei listati}
\crefname{lstlisting}{listato}{listati}
\Crefname{lstlisting}{Listato}{Listati}
\crefname{listing}{listato}{listati}  
\Crefname{listing}{Listato}{Listati}

% Colors for code highlighting
\definecolor{code-background}{RGB}{245,245,245}
\definecolor{code-teal}{RGB}{100,140,138}
\definecolor{code-blue}{RGB}{44,35,245}
\definecolor{code-green}{RGB}{65,145,55}
\definecolor{code-pink}{RGB}{165,48,246}
\definecolor{code-red}{RGB}{165,37,70}
\definecolor{code-gray}{RGB}{110,110,110}

% Listing configurations
\lstdefinestyle{inline}{
	captionpos=b,
	% frame=leftline,
	% rulecolor=\color{code-gray},
	showstringspaces=false,
	basicstyle={\footnotesize\ttfamily},
	identifierstyle=\color{black},
	stringstyle={\color{code-teal}},
	keywordstyle=[1]{\color{code-pink}},
	keywordstyle=[2]{\color{code-green}},
	keywordstyle=[3]{\color{code-gray}},
	keywordstyle=[4]{\color{code-red}\bfseries},
	commentstyle={\color{code-teal}},
	escapechar={^},
	emphstyle={},
	breaklines=true,
	tabsize=2,
	extendedchars=true,
	keepspaces=true,
}

\lstset{
	style=inline, 
	autogobble=true 
	% automatically removes whitespace at the beginnning
	% of the lines of code inside listings
}

\lstdefinelanguage{haskell}{
	sensitive=true,
	string=[b]",
	comment=[l]{--},
	morecomment=[n]{\{-}{-\}},
	morekeywords=[1]{->, =, <-},
	morekeywords=[2]{data, class, instance, where, let, in, do, if, then, else, case, of, type, deriving, newtype},
	morekeywords=[3]{<*>,<$>,$,>>=,<=,>=,<,>,*,+,/,-,::},
	morekeywords=[4]{IO, FilePath, Int, String, Double, Monad, Applicative, Functor, Text},
	otherkeywords={->,-,<*>,<$>,$,>>=,<=,>=,<,>,*,+,/,::,=,->,<-}
}

\lstdefinelanguage{scala3}{
	sensitive=true,
	string=[b]",
	comment=[l]{//},
	morekeywords=[1]{=, =>},
	morekeywords=[2]{throw, using, opaque, @main, type, with, import, summon, for, yield, final, given, try, finally, extension, def, val, var, if, then, else, enum, case, match, object, class, trait, sealed},
	morekeywords=[3]{*},
	morekeywords=[4]{User, UserId, UserStore, Delete, Runtime, ProductionRunner, TestRunner, Map, Fail, HasState, App, Any, Parser, Program1, Program2, Program, MonadTransformer, StateTFixS, Unit, OptionT, StateT, IO, String, Monad, State, Option, Some, None, Result, Ok, Error, Int, Exception},
	otherkeywords={*, =, =>}
}
